# Project Management System - Deployment Guide

This guide provides step-by-step instructions for deploying the Project Management System to Render (backend) and Vercel (frontend).

## Prerequisites

Before starting the deployment process, ensure you have:

1. **GitHub Account**: Both Render and Vercel integrate with GitHub
2. **Git Repository**: Push your code to a GitHub repository
3. **Email Service**: Gmail account for SMTP (or any SMTP provider)
4. **Domain** (Optional): Custom domain for production

## Backend Deployment to Render

### Step 1: Prepare Your Repository
1. Make sure your backend code is in a `backend/` folder in your repository
2. Ensure the following files are present in the `backend/` directory:
   - `Dockerfile` (created)
   - `render.yaml` (created)
   - `composer.json`
   - `composer.lock`
   - `package.json`
   - `package-lock.json`
   - `.env.example`

### Step 2: Create Render Account
1. Go to [render.com](https://render.com) and sign up/sign in
2. Connect your GitHub account to Render

### Step 3: Deploy Backend
1. Click "New +" button in Render dashboard
2. Select "Blueprint" from the dropdown
3. Connect your GitHub repository
4. Select the repository containing your project
5. Render will automatically detect the `render.yaml` file
6. Configure the following settings:

#### Service Configuration:
- **Name**: `project-management-backend`
- **Runtime**: Docker (automatically detected)
- **Region**: Choose the closest region to your users

#### Environment Variables:
Set these in Render dashboard (Environment tab):

```
APP_NAME=Project Management System
APP_ENV=production
APP_DEBUG=false
MAIL_MAILER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-gmail-app-password
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=your-email@gmail.com
MAIL_FROM_NAME=Project Management System
QUEUE_CONNECTION=database
```

#### Database Configuration:
- Render will automatically create a PostgreSQL database
- The database credentials will be automatically injected as environment variables

### Step 4: Database Setup
1. After deployment, go to your Render service
2. Check the "Logs" tab to see the deployment progress
3. The Docker container will automatically run:
   - `php artisan migrate --force` (database migrations)
   - `php artisan db:seed` (optional seeders)

### Step 5: Verify Backend Deployment
1. Once deployed, you'll get a URL like: `https://your-service-name.onrender.com`
2. Test the API endpoints:
   - `GET https://your-service-name.onrender.com/api/user` (should return 401 Unauthorized)
   - The API is ready when you see successful responses

## Frontend Deployment to Vercel

### Step 1: Prepare Your Repository
1. Make sure your frontend code is in a `frontend/` folder in your repository
2. Ensure the following files are present in the `frontend/` directory:
   - `vercel.json` (created)
   - `package.json`
   - `package-lock.json`
   - `public/` folder with `index.html`
   - `src/` folder with React components

### Step 2: Create Vercel Account
1. Go to [vercel.com](https://vercel.com) and sign up/sign in
2. Connect your GitHub account to Vercel

### Step 3: Deploy Frontend
1. Click "New Project" in Vercel dashboard
2. Import your GitHub repository
3. Configure the project settings:

#### Project Settings:
- **Framework Preset**: Create React App
- **Root Directory**: `frontend/` (important!)
- **Build Command**: `npm run build`
- **Output Directory**: `build`

#### Environment Variables:
Set these in Vercel dashboard:

```
REACT_APP_API_BASE_URL=https://your-render-backend-url.onrender.com/api
REACT_APP_APP_NAME=Project Management System
REACT_APP_VERSION=1.0.0
```

### Step 4: Deploy
1. Click "Deploy"
2. Vercel will build and deploy your frontend
3. You'll get a URL like: `https://your-project-name.vercel.app`

### Step 5: Configure Custom Domain (Optional)
1. Go to your Vercel project settings
2. Navigate to "Domains" tab
3. Add your custom domain
4. Follow Vercel's DNS configuration instructions

## Post-Deployment Configuration

### Step 1: Update CORS Settings
In your Render backend service, ensure CORS is properly configured:

1. Go to your Render service dashboard
2. Add environment variable:
```
SANCTUM_STATEFUL_DOMAINS=https://your-vercel-frontend-url.vercel.app
```

### Step 2: Test the Integration
1. Open your Vercel frontend URL
2. Try to register a new user
3. Verify that API calls work correctly
4. Test login functionality
5. Check dashboard data loading

### Step 3: Email Configuration
For production email functionality:

1. **Gmail Setup**:
   - Enable 2-factor authentication on your Gmail account
   - Generate an App Password: https://support.google.com/accounts/answer/185833
   - Use the App Password in `MAIL_PASSWORD` environment variable

2. **Alternative SMTP Providers**:
   - SendGrid
   - Mailgun
   - Amazon SES
   - Postmark

### Step 4: SSL Certificate
- Render automatically provides SSL certificates
- Vercel automatically provides SSL certificates
- Both services handle certificate renewal automatically

## Troubleshooting

### Backend Issues

#### Database Connection Issues:
- Check database credentials in Render environment variables
- Verify database is running and accessible
- Check Render logs for connection errors

#### Migration Issues:
- Access your Render service via SSH or use Render's shell
- Run: `php artisan migrate:status` to check migration status
- Run: `php artisan migrate` if needed

#### Permission Issues:
- Check file permissions in storage and bootstrap/cache directories
- Ensure proper ownership: `chown -R www-data:www-data /var/www/html`

### Frontend Issues

#### API Connection Issues:
- Verify `REACT_APP_API_BASE_URL` is correctly set
- Check browser console for CORS errors
- Ensure backend URL includes `/api` suffix

#### Build Issues:
- Check Vercel deployment logs
- Verify all dependencies are in `package.json`
- Ensure Node.js version compatibility

#### Routing Issues:
- Verify `vercel.json` configuration
- Check that all routes are properly configured for SPA

### Common Solutions

#### Clear Cache:
```bash
# Backend
php artisan config:clear
php artisan cache:clear
php artisan route:clear
php artisan view:clear

# Frontend
rm -rf node_modules package-lock.json
npm install
```

#### Environment Variables:
- Double-check all environment variables are set correctly
- Ensure no extra spaces or special characters
- Restart services after environment variable changes

## Monitoring & Maintenance

### Render Monitoring:
- View logs in Render dashboard
- Monitor response times and error rates
- Set up alerts for downtime
- Check database performance

### Vercel Monitoring:
- View deployment history and logs
- Monitor function execution times
- Check analytics for user traffic
- Set up error tracking

### Regular Maintenance:
1. **Update Dependencies**:
   - Keep Laravel and React dependencies updated
   - Test thoroughly after updates

2. **Database Backups**:
   - Render provides automatic backups for PostgreSQL
   - Download backups regularly for safety

3. **Security Updates**:
   - Monitor security advisories for dependencies
   - Update packages promptly

4. **Performance Monitoring**:
   - Monitor API response times
   - Check database query performance
   - Optimize slow endpoints

## Cost Optimization

### Render Pricing:
- Free tier: 750 hours/month
- Paid plans start at $7/month
- Database costs: $7/month for starter plan

### Vercel Pricing:
- Free tier: Generous limits for small projects
- Pro plan: $20/month for larger applications
- Enterprise: Custom pricing

### Cost Saving Tips:
- Use free tiers for development/testing
- Optimize database queries
- Implement caching strategies
- Monitor usage and scale as needed

## Support & Resources

### Official Documentation:
- [Render Documentation](https://docs.render.com/)
- [Vercel Documentation](https://vercel.com/docs)
- [Laravel Documentation](https://laravel.com/docs)
- [React Documentation](https://reactjs.org/docs)

### Community Support:
- [Laravel Forums](https://laravel.com/forum)
- [React Community](https://reactjs.org/community)
- [Render Community](https://community.render.com/)
- [Vercel Community](https://vercel.community/)

---

## Quick Reference

### Backend URLs:
- API Base: `https://your-render-service.onrender.com/api`
- Health Check: `https://your-render-service.onrender.com/api/user` (requires auth)

### Frontend URLs:
- Main App: `https://your-vercel-project.vercel.app`
- Admin Panel: `https://your-vercel-project.vercel.app/users` (admin only)

### Environment Variables Summary:

**Backend (Render):**
```
APP_NAME=Project Management System
APP_ENV=production
APP_DEBUG=false
MAIL_MAILER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=your-email@gmail.com
MAIL_FROM_NAME=Project Management System
QUEUE_CONNECTION=database
```

**Frontend (Vercel):**
```
REACT_APP_API_BASE_URL=https://your-render-backend.onrender.com/api
REACT_APP_APP_NAME=Project Management System
REACT_APP_VERSION=1.0.0
```

---

**Deployment Complete! ðŸŽ‰**

Your Project Management System is now live and ready to use!